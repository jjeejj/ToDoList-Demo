// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/todolist/v1/todolist.proto

package todolistv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/jjeejj/todolist/backend/proto/todolist/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TodoServiceName is the fully-qualified name of the TodoService service.
	TodoServiceName = "todolist.v1.TodoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TodoServiceAddTaskProcedure is the fully-qualified name of the TodoService's AddTask RPC.
	TodoServiceAddTaskProcedure = "/todolist.v1.TodoService/AddTask"
	// TodoServiceGetTasksProcedure is the fully-qualified name of the TodoService's GetTasks RPC.
	TodoServiceGetTasksProcedure = "/todolist.v1.TodoService/GetTasks"
	// TodoServiceDeleteTaskProcedure is the fully-qualified name of the TodoService's DeleteTask RPC.
	TodoServiceDeleteTaskProcedure = "/todolist.v1.TodoService/DeleteTask"
	// TodoServiceUpdateTaskProcedure is the fully-qualified name of the TodoService's UpdateTask RPC.
	TodoServiceUpdateTaskProcedure = "/todolist.v1.TodoService/UpdateTask"
)

// TodoServiceClient is a client for the todolist.v1.TodoService service.
type TodoServiceClient interface {
	AddTask(context.Context, *connect.Request[v1.AddTaskRequest]) (*connect.Response[v1.AddTaskResponse], error)
	GetTasks(context.Context, *connect.Request[v1.GetTasksRequest]) (*connect.Response[v1.GetTasksResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
	UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error)
}

// NewTodoServiceClient constructs a client for the todolist.v1.TodoService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTodoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TodoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	todoServiceMethods := v1.File_proto_todolist_v1_todolist_proto.Services().ByName("TodoService").Methods()
	return &todoServiceClient{
		addTask: connect.NewClient[v1.AddTaskRequest, v1.AddTaskResponse](
			httpClient,
			baseURL+TodoServiceAddTaskProcedure,
			connect.WithSchema(todoServiceMethods.ByName("AddTask")),
			connect.WithClientOptions(opts...),
		),
		getTasks: connect.NewClient[v1.GetTasksRequest, v1.GetTasksResponse](
			httpClient,
			baseURL+TodoServiceGetTasksProcedure,
			connect.WithSchema(todoServiceMethods.ByName("GetTasks")),
			connect.WithClientOptions(opts...),
		),
		deleteTask: connect.NewClient[v1.DeleteTaskRequest, v1.DeleteTaskResponse](
			httpClient,
			baseURL+TodoServiceDeleteTaskProcedure,
			connect.WithSchema(todoServiceMethods.ByName("DeleteTask")),
			connect.WithClientOptions(opts...),
		),
		updateTask: connect.NewClient[v1.UpdateTaskRequest, v1.UpdateTaskResponse](
			httpClient,
			baseURL+TodoServiceUpdateTaskProcedure,
			connect.WithSchema(todoServiceMethods.ByName("UpdateTask")),
			connect.WithClientOptions(opts...),
		),
	}
}

// todoServiceClient implements TodoServiceClient.
type todoServiceClient struct {
	addTask    *connect.Client[v1.AddTaskRequest, v1.AddTaskResponse]
	getTasks   *connect.Client[v1.GetTasksRequest, v1.GetTasksResponse]
	deleteTask *connect.Client[v1.DeleteTaskRequest, v1.DeleteTaskResponse]
	updateTask *connect.Client[v1.UpdateTaskRequest, v1.UpdateTaskResponse]
}

// AddTask calls todolist.v1.TodoService.AddTask.
func (c *todoServiceClient) AddTask(ctx context.Context, req *connect.Request[v1.AddTaskRequest]) (*connect.Response[v1.AddTaskResponse], error) {
	return c.addTask.CallUnary(ctx, req)
}

// GetTasks calls todolist.v1.TodoService.GetTasks.
func (c *todoServiceClient) GetTasks(ctx context.Context, req *connect.Request[v1.GetTasksRequest]) (*connect.Response[v1.GetTasksResponse], error) {
	return c.getTasks.CallUnary(ctx, req)
}

// DeleteTask calls todolist.v1.TodoService.DeleteTask.
func (c *todoServiceClient) DeleteTask(ctx context.Context, req *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return c.deleteTask.CallUnary(ctx, req)
}

// UpdateTask calls todolist.v1.TodoService.UpdateTask.
func (c *todoServiceClient) UpdateTask(ctx context.Context, req *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error) {
	return c.updateTask.CallUnary(ctx, req)
}

// TodoServiceHandler is an implementation of the todolist.v1.TodoService service.
type TodoServiceHandler interface {
	AddTask(context.Context, *connect.Request[v1.AddTaskRequest]) (*connect.Response[v1.AddTaskResponse], error)
	GetTasks(context.Context, *connect.Request[v1.GetTasksRequest]) (*connect.Response[v1.GetTasksResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
	UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error)
}

// NewTodoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTodoServiceHandler(svc TodoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	todoServiceMethods := v1.File_proto_todolist_v1_todolist_proto.Services().ByName("TodoService").Methods()
	todoServiceAddTaskHandler := connect.NewUnaryHandler(
		TodoServiceAddTaskProcedure,
		svc.AddTask,
		connect.WithSchema(todoServiceMethods.ByName("AddTask")),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceGetTasksHandler := connect.NewUnaryHandler(
		TodoServiceGetTasksProcedure,
		svc.GetTasks,
		connect.WithSchema(todoServiceMethods.ByName("GetTasks")),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceDeleteTaskHandler := connect.NewUnaryHandler(
		TodoServiceDeleteTaskProcedure,
		svc.DeleteTask,
		connect.WithSchema(todoServiceMethods.ByName("DeleteTask")),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceUpdateTaskHandler := connect.NewUnaryHandler(
		TodoServiceUpdateTaskProcedure,
		svc.UpdateTask,
		connect.WithSchema(todoServiceMethods.ByName("UpdateTask")),
		connect.WithHandlerOptions(opts...),
	)
	return "/todolist.v1.TodoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TodoServiceAddTaskProcedure:
			todoServiceAddTaskHandler.ServeHTTP(w, r)
		case TodoServiceGetTasksProcedure:
			todoServiceGetTasksHandler.ServeHTTP(w, r)
		case TodoServiceDeleteTaskProcedure:
			todoServiceDeleteTaskHandler.ServeHTTP(w, r)
		case TodoServiceUpdateTaskProcedure:
			todoServiceUpdateTaskHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTodoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTodoServiceHandler struct{}

func (UnimplementedTodoServiceHandler) AddTask(context.Context, *connect.Request[v1.AddTaskRequest]) (*connect.Response[v1.AddTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todolist.v1.TodoService.AddTask is not implemented"))
}

func (UnimplementedTodoServiceHandler) GetTasks(context.Context, *connect.Request[v1.GetTasksRequest]) (*connect.Response[v1.GetTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todolist.v1.TodoService.GetTasks is not implemented"))
}

func (UnimplementedTodoServiceHandler) DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todolist.v1.TodoService.DeleteTask is not implemented"))
}

func (UnimplementedTodoServiceHandler) UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todolist.v1.TodoService.UpdateTask is not implemented"))
}
